{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/supabase/middleware.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr';\nimport { NextResponse, type NextRequest } from 'next/server';\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  });\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll();\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) =>\n            request.cookies.set(name, value)\n          );\n          supabaseResponse = NextResponse.next({\n            request,\n          });\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          );\n        },\n      },\n    }\n  );\n\n  // セッションの更新（有効期限の延長など）\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  // 認証が必要なパス\n  const protectedPaths = ['/', '/workflow'];\n  const isProtectedPath = protectedPaths.some((path) =>\n    request.nextUrl.pathname.startsWith(path)\n  );\n\n  // 未認証でprotectedPathsにアクセスしようとした場合、/loginにリダイレクト\n  if (isProtectedPath && !user && request.nextUrl.pathname !== '/login') {\n    const url = request.nextUrl.clone();\n    url.pathname = '/login';\n    return NextResponse.redirect(url);\n  }\n\n  // 認証済みで/loginにアクセスしようとした場合、/にリダイレクト\n  if (request.nextUrl.pathname === '/login' && user) {\n    const url = request.nextUrl.clone();\n    url.pathname = '/';\n    return NextResponse.redirect(url);\n  }\n\n  return supabaseResponse;\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;;;AAEO,eAAe,cAAc,OAAoB;IACtD,IAAI,mBAAmB,gMAAY,CAAC,IAAI,CAAC;QACvC;IACF;IAEA,MAAM,WAAW,IAAA,uMAAkB,sUAGjC;QACE,SAAS;YACP;gBACE,OAAO,QAAQ,OAAO,CAAC,MAAM;YAC/B;YACA,QAAO,YAAY;gBACjB,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM;gBAE5B,mBAAmB,gMAAY,CAAC,IAAI,CAAC;oBACnC;gBACF;gBACA,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,iBAAiB,OAAO,CAAC,GAAG,CAAC,MAAM,OAAO;YAE9C;QACF;IACF;IAGF,sBAAsB;IACtB,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACf,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE/B,WAAW;IACX,MAAM,iBAAiB;QAAC;QAAK;KAAY;IACzC,MAAM,kBAAkB,eAAe,IAAI,CAAC,CAAC,OAC3C,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;IAGtC,gDAAgD;IAChD,IAAI,mBAAmB,CAAC,QAAQ,QAAQ,OAAO,CAAC,QAAQ,KAAK,UAAU;QACrE,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG;QACf,OAAO,gMAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,oCAAoC;IACpC,IAAI,QAAQ,OAAO,CAAC,QAAQ,KAAK,YAAY,MAAM;QACjD,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;QACjC,IAAI,QAAQ,GAAG;QACf,OAAO,gMAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO;AACT"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { type NextRequest } from 'next/server';\nimport { updateSession } from '@/lib/supabase/middleware';\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request);\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public files (public folder)\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;;;AACA;;AAEO,eAAe,WAAW,OAAoB;IACnD,OAAO,MAAM,IAAA,sJAAa,EAAC;AAC7B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}